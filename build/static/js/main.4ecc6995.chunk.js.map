{"version":3,"sources":["ethereum/config.js","ethereum/ethFunc.js","ethereum/store.js","ethereumContext.js","App.js","components/header/header.js","index.js"],"names":["config","assetNames","key","text","value","addrTos","log1","console","log","GWEI","fromWei","weiAmount","dp","ethers","utils","formatUnits","parseInt","err","error","fromWeiE","toWei","amount","parseUnits","toWeiE","extractCompo","compo","ctrtNum","acctIdx","a","undefined","length","instContracts","instERC20FixedSupply","instSalesCtrt","Number","isInteger","acctX","getEthNodeURL","Promise","resolve","reject","getWeb3AfLoad","window","addEventListener","detectEthereumProvider","provider","web3","Web3","request","method","catch","warn","selectedAddress","ethNodeURL","providers","HttpProvider","init","version","currentProvider","isMetaMask","mesg","eth","getAccounts","accounts","Array","isArray","chainId","ethereum","getCtrtAddresses","addrSalesCtrt","addrERC20FixedSupply","Contract","ABI_SalesCtrt","abi","ABI_ERC20FixedSupply","BalanceOf","userAddr","acct0","methods","balanceOf","call","data","transferToken","gasPrice","gasLimit","addrTo","amountWei","addrFrom","transfer","send","from","gas","on","receipt","JSON","stringify","transactionHash","buyViaToken","tokenId","slotPrices1","buyViaTokenCheck","result","BuyNFTViaETHCheck","withdrawToken","toString","React","createContext","App","autoRefreshOnNetworkChange","gasPriceDefault","gasLimitDefault","useState","setCompo","amountSet","amountToWithdraw","amountToWithdrawSet","setLoading","setErrMsg","addrToSet","tokenBalanceAcct","tokenBalanceAcctSet","tokenBalanceAddr","tokenBalanceAddrSet","assetName","assetNameSet","slotId","slotIdSet","buyViaToken1ErrMsg","buyViaToken1ErrMsgSet","transferToken1ErrMsg","transferToken1ErrMsgSet","withdrawToken1ErrMsg","withdrawToken1ErrMsgSet","useEffect","compo1","isMetaMask2","prevCompo","location","reload","initAction","run","balanceOfAcct1","event","preventDefault","data1","balanceOfAddr1","networkId","transferToken1","checkNumeric","buyViaToken1","withdrawToken1","inputValue","inputSource","isNaN","errMsg","showErr","clearErr","className","Provider","Form","onSubmit","Button","content","color","Label","size","Grid","columns","Row","centered","Column","Dropdown","placeholder","scrolling","wrapSelection","selection","options","onChange","e","Input","label","labelPosition","target","Header","hidden","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ecc6995.chunk.js","sourcesContent":["/*config ...\n@type: Configuration\n@brief ... \n\n//-------------== To Deploy\nFor Production:  isProduction to 1\n\n$ yarn deploy \nThen push\n//-------------==\nmanual push: copy ethereum192x192.png into repo\n\nerc20TokenAddress: '',\n\n@date   2021-04-26\n*/\nexport const config = {\n  infuraProvider:\n    \"https://eth-mainnet.alchemyapi.io/v2/k2--UTxxx\",\n  ethNodeURL0: \"\",\n  ethNodeURL1: \"https://mainnet.infura.io/v3/75df2\",\n  ethNodeURL4: \"https://rinkeby.infura.io/v3/75df2\",\n  ethNodeURL42: \"https://kovan.infura.io/v3/75df2\",\n  gasDataSource:\n    \"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=GH7KVC23UWE9BTDKDVRDSTTE5X8I25U2X5\",\n  password: \"abc123\",\n  DBID: 0,\n  isProduction: 0,\n  serverNumer: 1,\n  gasPrice: 55,\n  gasLimit: 200000,\n  server0: \"http://localhost:3000\",\n  server1: \"https://google.com\",\n  defaultUserChoice: 2,\n  user1: \"0x22202c0dF1f47E06303fCDe7F25bB0ef0429d61E\",\n  user2: \"0xF7Cff794396F15619628625C1778FFe880ee5326\",\n  recordsPerPage: 3,\n  contractGroupId: 42,\n  SalesCtrt_Kovan: \"0x8Bbc9a890c8D82312e88D1de0989a7a493110adD\",\n  ERC20FixedSupply_Kovan: \"0x1A9dCe212Cd804A7D95B28f6A9AE32861DC12221\"\n};\n\nexport const assetNames = [\n  {\n    key: \"001\",\n    text: \"Bitcoin\",\n    value: \"bitcoin\",\n  },\n  {\n    key: \"002\",\n    text: \"Ethereum\",\n    value: \"ethereum\",\n  },\n];\n\nexport const addrTos = [\n  {\n    key: \"0\",\n    text: \"SalesCtrt\",\n    value: config.SalesCtrt_Kovan,\n  },\n  {\n    key: \"1\",\n    text: \"User1\",\n    value: config.user1,\n  },\n  {\n    key: \"2\",\n    text: \"User2\",\n    value: config.user2,\n  },\n];\n\nexport const slotIds = [\n  {\n    key: \"001\",\n    text: \"SlotId 001\",\n    value: \"1\",\n  },\n  {\n    key: \"002\",\n    text: \"SlotId 002\",\n    value: \"2\",\n  },\n  {\n    key: \"003\",\n    text: \"SlotId 003\",\n    value: \"3\",\n  },\n];\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport { ethers, BigNumber } from \"ethers\"; //BigNumber\nimport Web3 from \"web3\";\nimport { config } from \"../ethereum/config\";\nimport ABI_ERC20FixedSupply from \"./ABI_ERC20FixedSupply.json\";\nimport ABI_SalesCtrt from \"./ABI_SalesCtrt.json\";\n\n//import { rewardsCtrtIdxes, dbSelections } from \"./config\";\n// const instance = new web3.eth.Contract(\n//     JSON.parse(NFTokenMetadataEnumerable.interface),\n//     '0xe6Da20c6F3ba3ac86C7FA3da155E5847F3cDE7e6'\n// );\n// export default instance;\n//--------------------------== utils\nexport const log1 = console.log;\n//const bigNum = (item) => BigNumber.from(item);\n\n//const dp = 18;\n//const base = bigNum(10).pow(dp);\n//const SECONDS_IN_A_DAY = 86400;\n//const one1 = constants.One;\n//const bnOne = bigNum(one1);\n//const MAX_INTEGER = new bigNum(2).pow(new bigNum(256)).sub(new bigNum(1));\n//const OptionType = { Put: 1, Call: 2 };\nexport const addr0 = \"0x0000000000000000000000000000000000000000\";\n\n//const amp = 1000000;\nexport const GWEI = 1000000000;\n\nexport const fromWeiE = (weiAmount, dp = 18) => {\n  try {\n    return ethers.utils.formatUnits(weiAmount, parseInt(dp));\n  } catch (err) {\n    console.error(\"fromWeiE() failed:\", err);\n    return -1;\n  }\n}; //input: BN or string, dp = 6 or 18 number, output: string\n\nexport const toWeiE = (amount, dp = 18) => {\n  try {\n    return ethers.utils.parseUnits(amount, parseInt(dp));\n  } catch (err) {\n    console.error(\"toWeiE() failed:\", err);\n    return -1;\n  }\n}; //input: string, output: Bn\n\nexport const fromWei = (weiAmount) => fromWeiE(weiAmount);\n//web3.utils.fromWei(weiAmount.toString(), \"ether\");\n\nexport const toWei = (amount) => toWeiE(amount);\n//web3.utils.toWei(amount.toString(), \"ether\");\n\n//--------------------------==\nexport const extractCompo = async (compo, ctrtNum, acctIdx) => {\n  //log1(\"compo:\", compo);\n  if (compo === undefined) {\n    console.error(\"compo is undefined\");\n    return [-1];\n  }\n  if (ctrtNum === undefined) {\n    console.error(\"ctrtNum is undefined\");\n    return [-1];\n  }\n  if (compo.length < 2) {\n    console.error(\"compo is not complete\");\n    return [-1];\n  }\n  const instContracts = compo[3];\n  if (instContracts === undefined) {\n    console.error(\"instContracts undefined\");\n  } else if (instContracts.length < 2) {\n    console.error(\"instContracts length is less than 3\");\n  }\n  const instERC20FixedSupply = instContracts[0];\n  const instSalesCtrt = instContracts[1];\n\n  if (Number.isInteger(acctIdx) && parseInt(Number(acctIdx)) >= 0) {\n    //const addr1 = await getAccounts(compo[0]);\n    const acctX = compo[1][acctIdx];\n    //console.log(\"acctX:\", acctX);\n\n    if (ctrtNum === 2) {\n      return [instERC20FixedSupply, acctX];\n    } else if (ctrtNum === 1) {\n      return [instSalesCtrt, acctX];\n    } else {\n      return [instSalesCtrt, acctX];\n    }\n  } else {\n    if (ctrtNum === 2) {\n      return [instERC20FixedSupply];\n    } else if (ctrtNum === 1) {\n      return [instSalesCtrt];\n    } else {\n      return [instSalesCtrt];\n    }\n  }\n};\n\nexport const func = async (compo) =>\n  new Promise(async (resolve, reject) => {\n    resolve(-1);\n  });\n\n//let stakedAmount  = fromWeiE(weiAmount, dp);\n\n// const err1 = checkDropdown(network1, rewardsCtrtIndex);\n// if (err1) {\n//   reject(err1);\n// }\n\n//---------------------== utility function\nconst getEthNodeURL = async () =>\n  new Promise(async (resolve, reject) => {\n    const ctrtNum = config.contractGroupId;\n    if (ctrtNum === 1) {\n      resolve(config.ethNodeURL1);\n    } else if (ctrtNum === 4) {\n      resolve(config.ethNodeURL4);\n    } else if (ctrtNum === 42) {\n      resolve(config.ethNodeURL42);\n    } else {\n      console.error(\"ethNodeNumber is invalid\");\n      reject(\"ethNodeNumber is invalid\");\n    }\n  });\n\nexport const getGasData = async () =>\n  new Promise(async (resolve, reject) => {\n    log1(\"---------== getGasData()\");\n    const url = config.gasDataSource;\n    const isToAcceptOpaqueRes = false;\n    const response = await fetch(url).catch((err) => {\n      log1(\"err@ fetch:\", err);\n      reject(false);\n    });\n    log1(\"response:\", response);\n    if (response && response.ok) {\n      let resObj = await response.json();\n      log1(\"resObj:\", resObj);\n      const gasPriceNew = resObj.result.ProposeGasPrice;\n      log1(\"ProposeGasPrice:\", gasPriceNew);\n      resolve(gasPriceNew);\n    } else if (isToAcceptOpaqueRes) {\n      let data = await response.text();\n      log1(\"ProposeGasPrice:\", data);\n      resolve(data ? JSON.parse(data) : {});\n    } else {\n      reject(false);\n    }\n  });\n\n//--------------------------==\nexport const getProviderSignerAfLoad = async () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      // wait for loading completion to avoid race condition with web3 injecting timing\n      if (window.ethereum) {\n        //new version of MetaMask exists\n        log1(\"newer ehereum detected\");\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        resolve(provider, signer);\n      } else {\n        const ethNodeURL = await getEthNodeURL().catch((err) => {\n          reject(err);\n        });\n        log1(\"using ethNodeURL:\", ethNodeURL);\n        const provider = new ethers.providers.JsonRpcProvider(ethNodeURL);\n        log1(\"no ethereum injected. Use infura endpoint\");\n        const signer = provider.getSigner();\n        resolve(provider, signer);\n      }\n    });\n  });\n\nexport const getWeb3AfLoad = async () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      // this addEventListener is only needed if you run this getWeb3AfLoad when the website loads up... wait for loading completion to avoid race condition with web3 injecting timing\n\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        //new version of MetaMask exists\n        log1(\"newer ehereum detected\");\n        // From now on, this should always be true:\n        // provider === window.ethereum\n        // Access the decentralized web!\n        // Legacy providers may only have ethereum.sendAsync\n\n        const web3 = new Web3(provider);\n        //has provider inside\n        await provider\n          .request({\n            method: \"eth_requestAccounts\",\n          })\n          .catch((err) => {\n            console.warn(\n              \"User denied account access or error occurred @ provider.request:\",\n              err\n            );\n            reject(err);\n          });\n        log1(\n          \"Acccounts now exposed\",\n          \"ethereum.selectedAddress\",\n          provider.selectedAddress\n        );\n        resolve(web3);\n      } else if (window.web3) {\n        //other wallet or older web3\n        const web3 = window.web3;\n        //const web3 = new Web3(window.web3.currentProvider);\n        log1(\"older web3 detected\");\n        resolve(web3);\n      } else {\n        // if the provider is not detected, detectEthereumProvider resolves to null\n        console.error(\"Please install MetaMask!\");\n\n        const ethNodeURL = await getEthNodeURL().catch((err) => {\n          reject(err);\n        });\n        log1(\"using ethNodeURL:\", ethNodeURL);\n        const provider = new Web3.providers.HttpProvider(ethNodeURL);\n        const web3 = new Web3(provider);\n        log1(\"no web3 injected. Use infura endpoint\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport const getWeb3 = async () =>\n  new Promise(async (resolve, reject) => {\n    //window.addEventListener(\"load\", async () => {\n    // wait for loading completion to avoid race condition with web3 injecting timing\n\n    const provider = await detectEthereumProvider();\n    if (provider) {\n      //new version of MetaMask exists\n      log1(\"newer ehereum detected\");\n      // From now on, this should always be true:\n      // provider === window.ethereum\n      // Access the decentralized web!\n      // Legacy providers may only have ethereum.sendAsync\n\n      const web3 = new Web3(provider);\n      //has provider inside\n      await provider\n        .request({\n          method: \"eth_requestAccounts\",\n        })\n        .catch((err) => {\n          console.warn(\n            \"User denied account access or error occurred @ provider.request:\",\n            err\n          );\n          reject(err);\n        });\n      log1(\n        \"Acccounts now exposed\",\n        \"ethereum.selectedAddress\",\n        provider.selectedAddress\n      );\n      resolve(web3);\n    } else if (window.web3) {\n      //other wallet or older web3\n      const web3 = window.web3;\n      //const web3 = new Web3(window.web3.currentProvider);\n      log1(\"older web3 detected\");\n      resolve(web3);\n    } else {\n      // if the provider is not detected, detectEthereumProvider resolves to null\n      console.error(\"Please install MetaMask!\");\n\n      const ethNodeURL = await getEthNodeURL().catch((err) => {\n        reject(err);\n      });\n      log1(\"using ethNodeURL:\", ethNodeURL);\n      const provider = new Web3.providers.HttpProvider(ethNodeURL);\n      const web3 = new Web3(provider);\n      log1(\"no web3 injected. Use infura endpoint\");\n      resolve(web3);\n    }\n    //});\n  });\n\nexport const init = async () =>\n  new Promise(async (resolve, reject) => {\n    let mesg;\n    console.log(\"init()\");\n    try {\n      //const web3 = await getWeb3().\n      const web3 = await getWeb3AfLoad().catch((err) => {\n        reject(err);\n        return false;\n      });\n      if (typeof web3 === \"undefined\") {\n        log1(\"missing web3:\", web3, typeof web3);\n        reject(\"missing web3\");\n        return false;\n      }\n      log1(\"web3 version:\", web3.version);\n\n      const isMetaMask = await web3.currentProvider.isMetaMask;\n      log1(\"isMetaMask\", isMetaMask);\n      if (!isMetaMask) {\n        mesg = \"Please install MetaMask browser extension\";\n        log1(mesg);\n        reject(mesg);\n        return false;\n      }\n\n      const accounts = await web3.eth.getAccounts();\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = ctrtX.networks[networkId];\n      if (!Array.isArray(accounts) || accounts.length === 0) {\n        mesg = \"missing accounts\";\n        log1(\n          \"missing accounts:\",\n          accounts,\n          Array.isArray(accounts),\n          accounts.length\n        );\n        reject(mesg);\n        return false;\n      }\n      if (accounts[0] === undefined) {\n        mesg = \"Please login to MetaMask(ETH wallet)\";\n        log1(mesg);\n        reject(mesg);\n        return false;\n      }\n      console.log(\"accounts:\", accounts);\n\n      const chainId = parseInt(window.ethereum.chainId, 16);\n      console.log(\"chainId:\", chainId);\n      if (chainId === 77) {\n        log1(\"chainId 77 for xDai Testnet detected\");\n      } else if (chainId === 1) {\n        log1(\"chainId 1 for Ethereum Mainnet detected\");\n      } else if (chainId === 4) {\n        log1(\"chainId 4 for Ethereum Rinkeby detected\");\n      } else if (chainId === 42) {\n        log1(\"chainId 42 for Ethereum Kovan detected\");\n      } else {\n        mesg = \"chainId invalid\";\n        reject(mesg);\n        return false;\n      }\n\n      const [addrSalesCtrt, addrERC20FixedSupply] = await getCtrtAddresses();\n      console.log(\n        \"addrSalesCtrt:\",\n        addrSalesCtrt,\n        \", addrERC20FixedSupply:\",\n        addrERC20FixedSupply\n      );\n\n      const instSalesCtrt = new web3.eth.Contract(\n        ABI_SalesCtrt.abi,\n        addrSalesCtrt\n      );\n      const instERC20FixedSupply = new web3.eth.Contract(\n        ABI_ERC20FixedSupply.abi,\n        addrERC20FixedSupply\n      );\n      if (typeof instSalesCtrt === \"undefined\") {\n        log1(\"missing instSalesCtrt:\", instSalesCtrt);\n        reject(\"missing instSalesCtrt\");\n        return false;\n      }\n      if (typeof instERC20FixedSupply === \"undefined\") {\n        log1(\"missing instERC20FixedSupply:\", instERC20FixedSupply);\n        reject(\"missing instERC20FixedSupply\");\n        return false;\n      }\n      const instContracts = [instERC20FixedSupply, instSalesCtrt];\n\n      log1(\"init is successful\");\n      resolve([\"web3\", accounts, chainId, instContracts]);\n    } catch (error) {\n      log1(error);\n      reject(\"init failed\");\n    }\n  });\n\nexport const getCtrtAddresses = async () =>\n  new Promise(async (resolve, reject) => {\n    const ctrtNum = config.contractGroupId;\n    let ctrtAddrs;\n    if (ctrtNum === 77) {\n    } else if (ctrtNum === 100) {\n      ctrtAddrs = [];\n      resolve(ctrtAddrs);\n    } else if (ctrtNum === 42) {\n      ctrtAddrs = [config.SalesCtrt_Kovan, config.ERC20FixedSupply_Kovan];\n      resolve(ctrtAddrs);\n    } else if (ctrtNum === 4) {\n      ctrtAddrs = [];\n      resolve(ctrtAddrs);\n    } else if (ctrtNum === 1) {\n      ctrtAddrs = [];\n      resolve(ctrtAddrs);\n    } else {\n      console.error(\"contractGroupId is invalid\");\n      reject(\"contractGroupId is invalid\");\n    }\n  });\n","import { ethers, BigNumber} from \"ethers\"; //BigNumber\n//import { config } from \"./config\";\nimport {extractCompo, toWei, fromWei, GWEI, addr0, getCtrtAddresses, getGasData, fromWeiE,  } from \"./ethFunc\";\n\n//--------------------------==\n//--------------------------== Token Contract\nexport const BalanceOf = async (compo, userAddr) =>\n  new Promise(async (resolve, reject) => {\n    console.log(\"---------== BalanceOf()\");\n    const [instERC20FixedSupply, acct0] = await extractCompo(compo, 2, 0);\n\n    if (instERC20FixedSupply === undefined || acct0 === undefined) {\n      resolve(-1);\n      return false;\n    }\n\n    if (userAddr === undefined || userAddr === \"\") {\n      userAddr = acct0;\n      console.log(\"using default accounts[0]\");\n    }\n    console.log(\"userAddr:\", userAddr);\n    try {\n      const data = await instERC20FixedSupply.methods\n        .balanceOf(userAddr)\n        .call();\n      console.log(\"data:\", data);\n      resolve(data);\n    } catch (err) {\n      console.error(\"BalanceOf() failed.\", err);\n      reject(-1);\n    }\n  });\n\n\n//--------------------------== ARK Contract\nexport const ReadARKFunc = async (compo) =>\nnew Promise(async (resolve, reject) => {\n  console.log(\"---------== ReadARKFunc()\");\n  const [instERC20FixedSupply, acct0] = await extractCompo(compo, 0, 0);\n  if (instERC20FixedSupply === undefined) {\n    resolve(-1);\n  }\n  try {\n    const data = await instERC20FixedSupply.methods.name().call();\n    console.log(\"data:\", data);\n    resolve(data);\n  } catch (err) {\n    console.error(\"ReadFunc() failed.\", err);\n    reject(-1);\n  }\n});\n\n\nexport const transferToken = async (compo, gasPrice, gasLimit, addrTo, amountWei) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== transferToken()\");\n  const [instERC20FixedSupply, addrFrom] = await extractCompo(compo, 2, 0);\n\n  try {\n    if (instERC20FixedSupply !== undefined && addrFrom !== \"\") {\n      const isAvailable = true;\n      if(!isAvailable){\n        console.log(\"tokenId not available\");\n        reject(\"tokenId not available\");\n        return false;\n      }\n      //const value1= web3.utils.toWei('0.1', \"ether\");\n      console.log(\"addrFrom:\", addrFrom, \", addrTo:\", addrTo, \", amountWei:\", amountWei, \", gasPrice:\", gasPrice, \", gasLimit:\", gasLimit);\n    \n      await instERC20FixedSupply.methods\n        .transfer(addrTo, amountWei)\n        .send({\n          from: addrFrom,\n          gasPrice: gasPrice * GWEI,\n          gas: gasLimit,\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(`receipt: ${JSON.stringify(receipt, null, 4)}`);\n          resolve(receipt.transactionHash);\n        })\n        .on(\"error\", async(err, receipt) => {\n          console.error(\"err@transferToken:\", err);\n          reject(err);\n          return false;\n        });\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\n//--------------------------== SalesCtrt\nexport const ReadSalesCtrt = async (compo) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== ReadSalesCtrt()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n  const slotId = 1;\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      const slotPrices1 = await instSalesCtrt.methods.slotPrices(slotId).call();\n      const slotPrices1ETH = fromWei(slotPrices1);\n      resolve(slotPrices1ETH);\n    } else {\n      console.log(\"addr:\", addrFrom);\n      console.error(\"instSalesCtrt or addrFrom invalid\")\n    }\n  } catch (err) {\n    console.error(\"err@ReadSalesCtrt:\", err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\n\nexport const buyViaToken = async (compo, gasPrice, gasLimit, tokenId) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== buyViaToken()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      // const addrNFTContract = await instSalesCtrt.methods.addrNFTContract().call();\n      // console.log(\"addrNFTContract:\",addrNFTContract );\n      const isAvailable = true;\n      if(!isAvailable){\n        console.log(\"tokenId not available\");\n        reject(\"tokenId not available\");\n        return false;\n      }\n\n      const slotPrices1 = await instSalesCtrt.methods.slotPrices1().call();\n      //const value1= web3.utils.toWei('0.1', \"ether\");\n\n      console.log(\"addrFrom:\", addrFrom, \", gasPrice:\", gasPrice, \", gasLimit:\", gasLimit, tokenId, slotPrices1, typeof slotPrices1 );\n    \n      await instSalesCtrt.methods\n        .buyViaToken(tokenId)\n        .send({\n          from: addrFrom,\n          value: slotPrices1,\n          gasPrice: gasPrice * GWEI,\n          gas: gasLimit,\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(`receipt: ${JSON.stringify(receipt, null, 4)}`);\n          resolve(receipt.transactionHash);\n        })\n        .on(\"error\", async(err, receipt) => {\n          console.error(\"err@buyViaToken:\", err);\n          const result = await buyViaTokenCheck(compo, gasPrice, gasLimit, tokenId).catch((err) => {\n            console.error(\"err@buyViaTokenCheck:\", err)\n            reject(err);\n            return false;\n          });;\n          console.log(\"buyViaTokenCheck result:\", result);\n          reject(err);\n          return false;\n        });\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\nexport const buyViaTokenCheck = async (compo, gasPrice, gasLimit, tokenId) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== buyViaETHCheck()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n\n  console.log(\"addrFrom:\", addrFrom, gasPrice, gasLimit, tokenId);\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      const result = await instSalesCtrt.methods\n        .BuyNFTViaETHCheck(tokenId)\n        .call({from: addrFrom});\n        resolve(result);\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\n\n//-----------------------==\nexport const buyViaETH = async (compo, gasPrice, gasLimit, tokenId) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== buyViaETH()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      // const addrNFTContract = await instSalesCtrt.methods.addrNFTContract().call();\n      // console.log(\"addrNFTContract:\",addrNFTContract );\n      const isAvailable = true;\n      if(!isAvailable){\n        console.log(\"tokenId not available\");\n        reject(\"tokenId not available\");\n        return false;\n      }\n\n      const slotPrices1 = await instSalesCtrt.methods.slotPrices1().call();\n      //const value1= web3.utils.toWei('0.1', \"ether\");\n\n      console.log(\"addrFrom:\", addrFrom, \", gasPrice:\", gasPrice, \", gasLimit:\", gasLimit, tokenId, slotPrices1, typeof slotPrices1 );\n    \n      await instSalesCtrt.methods\n        .buyViaETH(tokenId)\n        .send({\n          from: addrFrom,\n          value: slotPrices1,\n          gasPrice: gasPrice * GWEI,\n          gas: gasLimit,\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(`receipt: ${JSON.stringify(receipt, null, 4)}`);\n          resolve(receipt.transactionHash);\n        })\n        .on(\"error\", async(err, receipt) => {\n          console.error(\"err@buyViaETH:\", err);\n          const result = await buyViaETHCheck(compo, gasPrice, gasLimit, tokenId).catch((err) => {\n            console.error(\"err@buyViaETHCheck:\", err)\n            reject(err);\n            return false;\n          });;\n          console.log(\"buyViaETHCheck result:\", result);\n          reject(err);\n          return false;\n        });\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\nexport const buyViaETHCheck = async (compo, gasPrice, gasLimit, tokenId) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== buyViaETHCheck()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n\n  console.log(\"addrFrom:\", addrFrom, gasPrice, gasLimit, tokenId);\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      const result = await instSalesCtrt.methods\n        .BuyNFTViaETHCheck(tokenId)\n        .call({from: addrFrom});\n        resolve(result);\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n\nexport const withdrawToken = async (compo, gasPrice, gasLimit, addrTo, amountWei) => new Promise(async (resolve, reject) => {\n  console.log(\"---------== withdrawToken()\");\n  const [instSalesCtrt, addrFrom] = await extractCompo(compo, 1, 0);\n\n  try {\n    if (instSalesCtrt !== undefined && addrFrom !== \"\") {\n      const isAvailable = true;\n      if(!isAvailable){\n        console.log(\"tokenId not available\");\n        reject(\"tokenId not available\");\n        return false;\n      }\n      //const value1= web3.utils.toWei('0.1', \"ether\");\n      console.log(\"addrFrom:\", addrFrom, \", addrTo:\", addrTo, \", amountWei:\", amountWei.toString(), \", gasPrice:\", gasPrice, \", gasLimit:\", gasLimit);\n    \n      await instSalesCtrt.methods\n        .withdrawToken(addrTo, amountWei.toString())\n        .send({\n          from: addrFrom,\n          gasPrice: gasPrice * GWEI,\n          gas: gasLimit,\n        })\n        .on(\"receipt\", (receipt) => {\n          console.log(`receipt: ${JSON.stringify(receipt, null, 4)}`);\n          resolve(receipt.transactionHash);\n        })\n        .on(\"error\", async(err, receipt) => {\n          console.error(\"err@withdrawToken:\", err);\n          reject(err);\n          return false;\n        });\n    } else {\n      resolve(\"contract instance or addrFrom invalid\");\n    }\n  } catch (err) {\n    console.error(err);\n    reject(err);\n    //this.setState({errGetBalance: err.message});\n  }\n});\n","import React from \"react\";\nexport default React.createContext(undefined);","import \"./App.scss\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Button, Input, Label, Message,  Dropdown,\n  Grid, } from \"semantic-ui-react\";\n//Card, Header, Segment, GridRow, Dropdown, Grid,\n\n//import { DropDownRewardsCtrts } from \"./dropdown\";\nimport {init, log1, fromWei, toWei,  \n} from \"./ethereum/ethFunc\"; //getGasData, getERC20Balance, fromWei, checkNetwork, getAricBalance,\nimport { assetNames, addrTos, config } from \"./ethereum/config\"; //rewardsCtrtIdxes, dbSelections, assetNames, addrTos,\nimport { BalanceOf, ReadSalesCtrt, buyViaToken, buyViaETH, transferToken, withdrawToken, } from \"./ethereum/store\";\n\n//import Header from './components/header/header';\n\n/**\nTo add a function: duplicate App function, errMsg, UI, store function(Ethereum function), replace from red part in App.js\n*/\nimport EthereumContext from \"./ethereumContext\"; //no {}\n\nfunction App() {\n  if (window.ethereum) window.ethereum.autoRefreshOnNetworkChange = false;\n\n  const gasPriceDefault = config.gasPrice; //1 GWei\n  const gasLimitDefault = config.gasLimit; //1000000\n  const [compo, setCompo] = useState([]);\n  const [amount, amountSet] = useState(\"0.001\");\n  const [amountToWithdraw, amountToWithdrawSet] = useState(\"0.001\");\n\n  const [gasPrice, setGasPrice] = useState(gasPriceDefault);\n  const [gasLimit, setGasLimit] = useState(gasLimitDefault);\n  const [loading, setLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n  const userChoice = config.defaultUserChoice;\n  let toAddrDefault;\n  if (userChoice === 1) {\n    toAddrDefault = config.user1;\n  } else {\n    toAddrDefault = config.user2;\n  }\n  const [addrTo, addrToSet] = useState(config.SalesCtrt_Kovan);\n  const [tokenBalanceAcct, tokenBalanceAcctSet] = useState(\"\");\n  const [tokenBalanceAddr, tokenBalanceAddrSet] = useState(\"\");\n\n  const [assetName, assetNameSet] = useState(\"bitcoin\");\n  const [slotId, slotIdSet] = useState(\"\");\n\n  const [buyViaToken1ErrMsg, buyViaToken1ErrMsgSet] = useState(\"\");\n  const [transferToken1ErrMsg, transferToken1ErrMsgSet] = useState(\"\");\n  const [withdrawToken1ErrMsg, withdrawToken1ErrMsgSet] = useState(\"\");\n\n\n  useEffect(() => {\n    //cannot add async here, so make async below\n    const initAction = async () => {\n      const compo1 = await init().catch((err) => {\n        console.error(`initAction failed: ${err}`);\n        //alert(`initialization failed`);\n        return;\n      });\n      //log1(\"compo1 length:\", compo1.length)\n      // await BalanceOf1();\n      // await CheckUser1();\n      // await CheckAvailable1();\n      setCompo(compo1);\n\n      if (!window.ethereum) {\n        console.error(\"window.ethereum does not exist\");\n        return;\n      }\n      const provider = window.ethereum;\n      const isMetaMask2 = provider.isMetaMask;\n      log1(\"isMetaMask2:\", isMetaMask2);\n\n      provider.on(\"accountsChanged\", (accounts) => {\n        log1(\"accountsChanged:\", accounts);\n        if (accounts.length === 0) {\n          console.error(\"accounts are empty\");\n        }\n        setCompo((prevCompo) => [\n          prevCompo[0],\n          accounts,\n          prevCompo[2],\n          prevCompo[3],\n        ]);\n      });\n\n      provider.on(\"chainChanged\", (chainId) => {\n        log1(\"App chainId:\", chainId);\n        // Handle the new chain.\n        // Correctly handling chain changes can be complicated.\n        // We recommend reloading the page unless you have good reason not to.\n        window.location.reload();\n      });\n    };\n    initAction();\n  }, []); //[] for running once\n\n  //wait for all requirements are populated: load initial conditions\n  useEffect(() => {\n    const run = async () => {\n      log1(\"useEffect2: good\");\n      await balanceOfAcct1();\n      //await ReadSalesCtrt1();\n    };\n    if (!Array.isArray(compo) || !compo.length) {\n      log1(\"useEffect2: is not an array, or is empty\");\n    } else {\n      run();\n    }\n  }, [compo]);\n\n  //const delayInMilliseconds = 5000; //1 second\n  // const showErrForDuration = async () => {\n  //   setTimeout(function () {\n  //     //your code to be executed after 1 second\n  //   }, delayInMilliseconds);\n  // };\n\n  const balanceOfAcct1 = async (event) => {\n    if (event) event.preventDefault();\n    log1(\"---------== balanceOfAcct1()\");\n    // setLoading(true);\n    // setErrMsg(\"\");\n    const data1 = await BalanceOf(compo).catch((err) => {\n      console.error(\"err@BalanceOf:\", err);\n      tokenBalanceAcctSet(\"?\");\n      //setErrMsg(\"balanceOfAcct1 failed\");\n      return false;\n    });\n    tokenBalanceAcctSet(fromWei(data1));\n  };\n\n  const balanceOfAddr1 = async (event) => {\n    if (event) event.preventDefault();\n    log1(\"---------== balanceOfAddr1()\");\n    // setLoading(true);\n    // setErrMsg(\"\");\n    const data1 = await BalanceOf(compo, addrTo).catch((err) => {\n      console.error(\"err@BalanceOf:\", err);\n      tokenBalanceAcctSet(\"?\");\n      //setErrMsg(\"balanceOfAddr1 failed\");\n      return false;\n    });\n    tokenBalanceAddrSet(fromWei(data1));\n  };\n\n  const ReadSalesCtrt1 = async (event) => {\n    if (event) event.preventDefault();\n    log1(\"---------== ReadSalesCtrt1()\");\n    // setLoading(true);\n    // setErrMsg(\"\");\n    const data1 = await ReadSalesCtrt(compo).catch((err) => {\n      console.error(\"err@ReadSalesCtrt:\", err);\n      tokenBalanceAcctSet(\"?\");\n      //setErrMsg(\"ReadSalesCtrt1 failed\");\n      return false;\n    });\n    log1(\"slotPrices[1]:\", data1)\n    //tokenBalanceAcctSet(fromWei(data1));\n  };\n\n  let networkId = 0;\n  if (compo === undefined || compo.length !== 4) {\n    log1(\"compo failed\", compo);\n    networkId = 0;\n  } else {\n    networkId = compo[2];\n  }\n  // if (typeof rewardsStates !== \"undefined\") {\n  //   //checking reading from smart contracts\n  // }\n\n  //--------------------== Write Functions of ERC20FixedSupply\n  const transferToken1 = async (event) => {\n    event.preventDefault();\n    log1(\"---------== transferToken1()\");\n    setLoading(true);\n    transferToken1ErrMsgSet(\"\");\n    const errSource = \"transferToken1\";\n    if (!checkNumeric(amount, errSource)) {\n      transferToken1ErrMsgSet(\"Please enter a valid amount\");\n      amountSet(\"\");\n      setLoading(false);\n      return false;\n    }\n\n    let isToRun = 1 === 1;\n    log1(\"gasPrice:\", gasPrice, \", gasLimit:\", gasLimit, \"amount:\", amount)\n    let result;\n    if(isToRun){\n      result = await transferToken(\n      compo, gasPrice, gasLimit, addrTo, toWei(amount)).catch((err) => {\n        //console.warn(\"err:\", err);\n        transferToken1ErrMsgSet(\"transferToken1 failed\");\n        setLoading(false);\n        return false;\n      });\n    } else {\n      transferToken1ErrMsgSet(\"\");\n      setLoading(false);\n      log1(\"buyViaTokenCheck result:\", result);\n      return true;\n    }\n    setLoading(false);\n    if(result){\n      log1(\"success! txn Hash:\", result);\n    } else {\n      log1(\"failure. result:\", result);\n    }\n  };\n\n  //--------------------== Write Functions of SalesCtrt\n  const buyViaToken1 = async (event) => {\n    event.preventDefault();\n    log1(\"---------== buyViaToken1()\");\n    setLoading(true);\n    buyViaToken1ErrMsgSet(\"\");\n    const errSource = \"buyViaToken1\";\n    if (!checkNumeric(slotId, errSource)) {\n      buyViaToken1ErrMsgSet(\"Please enter a valid slotId\");\n      slotIdSet(\"\");\n      setLoading(false);\n      return false;\n    }\n\n    let isToRun = 1 === 1;\n    log1(\"gasPrice:\", gasPrice, \", gasLimit:\", gasLimit, \"amount:\", slotId)\n    let result;\n    if(isToRun){\n      result = await buyViaToken(\n      compo, gasPrice, gasLimit, slotId).catch((err) => {\n        //console.warn(\"err:\", err);\n        buyViaToken1ErrMsgSet(\"buyViaToken1 failed\");\n        setLoading(false);\n        return false;\n      });\n    } else {\n      // result = await buyViaTokenCheck(\n      buyViaToken1ErrMsgSet(\"\");\n      setLoading(false);\n      log1(\"buyViaTokenCheck result:\", result);\n      return true;\n    }\n    setLoading(false);\n    if(result){\n      log1(\"success! txn Hash:\", result);\n    } else {\n      log1(\"failure. result:\", result);\n    }\n  };\n\n  const withdrawToken1 = async (event) => {\n    event.preventDefault();\n    log1(\"---------== withdrawToken1()\");\n    setLoading(true);\n    withdrawToken1ErrMsgSet(\"\");\n    const errSource = \"withdrawToken1\";\n    if (!checkNumeric(amountToWithdraw, errSource)) {\n      withdrawToken1ErrMsgSet(\"Please enter a valid amountToWithdraw\");\n      amountToWithdrawSet(\"\");\n      setLoading(false);\n      return false;\n    }\n\n    let isToRun = 1 === 1;\n    log1(\"gasPrice:\", gasPrice, \", gasLimit:\", gasLimit, \"amountToWithdraw:\", amountToWithdraw)\n    let result;\n    if(isToRun){\n      result = await withdrawToken(\n      compo, gasPrice, gasLimit, addrTo, toWei(amountToWithdraw)).catch((err) => {\n        //console.warn(\"err:\", err);\n        withdrawToken1ErrMsgSet(\"withdrawToken1 failed\");\n        setLoading(false);\n        return false;\n      });\n    } else {\n      // result = await buyViaTokenCheck(\n      withdrawToken1ErrMsgSet(\"\");\n      setLoading(false);\n      log1(\"buyViaTokenCheck result:\", result);\n      return true;\n    }\n    setLoading(false);\n    if(result){\n      log1(\"success! txn Hash:\", result);\n    } else {\n      log1(\"failure. result:\", result);\n    }\n  };\n\n  //--------------------==\n  const checkNumeric = (inputValue, inputSource) => {\n    log1(\"checkNumeric\", inputValue);\n    if (inputValue === \"\" || inputValue < 0 || isNaN(inputValue)) {\n      const errMsg =\n        \"input error@ \" +\n        inputSource +\n        \": amount cannot be empty, zero, negative, or non-numeric\";\n      console.warn(errMsg);\n      showErr(inputSource, errMsg);\n      return false;\n    } else {\n      log1(\"checkNumeric Ok\");\n      clearErr(inputSource);\n      return true;\n    }\n  };\n  const showErr = (inputSource, errMsg) => {\n    switch (inputSource) {\n      case \"gasPrice\":\n        setErrMsg(errMsg);\n        break;\n      default:\n        setErrMsg(errMsg);\n        console.warn(\"showErr: no matched inputSource\");\n    }\n  };\n  const clearErr = (inputSource) => {\n    switch (inputSource) {\n      case \"gasPrice\":\n        setErrMsg(\"\");\n        break;\n      default:\n        console.warn(\"clearErr: no matched inputSource\");\n        setErrMsg(\"\");\n      }\n  };\n\n  const handleDropdown_assetName = (e, { value }) => {\n    log1(\"handleDropdown_assetName value:\", value);\n    assetNameSet(value);\n  };\n  const handleDropdown_addrTo = (e, { value }) => {\n    log1(\"handleDropdown_addrTo value:\", value);\n    addrToSet(value);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <EthereumContext.Provider value={compo}>\n        <h1>ARK Coins</h1>\n        <h3>\n          Connected Network:{\" \"}\n          {networkId === 0\n            ? \"Please use WEB3 browser and choose correct network\"\n            : networkId}\n          , Network ID:{\" \"}\n          {networkId === Number(config.contractGroupId)\n            ? \"Ok\"\n            : \"Incorrect Network\"}\n        </h3>\n        <h3>Connected address: {compo[1]}</h3>\n\n        <br></br>\n        <Form onSubmit={balanceOfAcct1}>\n          <Button content=\"Balance Of Connected Account\" color=\"green\" />\n          <Label size={\"huge\"}>{tokenBalanceAcct} ARIC Coins</Label>\n        </Form>\n\n        <Form onSubmit={balanceOfAddr1}>\n          <Button content=\"Balance Of Selected Address\" color=\"green\" />\n          <Label size={\"huge\"}>{tokenBalanceAddr} ARIC Coins</Label>\n        </Form>\n\n        <br></br>\n        <h3>Contract Functions</h3>\n        <Grid columns={2}>\n          <Grid.Row centered columns={2}>\n            <Grid.Column>\n              <Dropdown\n                placeholder=\"Select AssetName\"\n                scrolling\n                wrapSelection={false}\n                selection\n                options={assetNames}\n                onChange={handleDropdown_assetName}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <Label>Contract index: {assetName}</Label>\n            </Grid.Column>\n\n            <Grid.Column>\n              <Dropdown\n                placeholder=\"Select Address\"\n                scrolling\n                wrapSelection={false}\n                selection\n                options={addrTos}\n                onChange={handleDropdown_addrTo}\n              />\n            </Grid.Column>\n            <Grid.Column>\n              <Label>Address: {addrTo}</Label>\n            </Grid.Column>\n\n          </Grid.Row>\n        </Grid>\n        <br></br>\n        <Input\n            label=\"\"\n            labelPosition=\"right\"\n            placeholder=\"0x...\"\n            value={addrTo}\n            onChange={(event) => {\n              addrToSet(event.target.value);\n            }}\n          />\n\n        <br></br>\n        <Form\n            onSubmit={transferToken1}\n            error={!!transferToken1ErrMsg}\n        >\n          <Button content=\"transferToken\" color=\"green\" />\n          <Input\n            label=\"\"\n            labelPosition=\"right\"\n            placeholder=\"amount in Ether\"\n            value={amount}\n            onChange={(event) => {\n              amountSet(event.target.value);\n            }}\n          />\n        </Form>\n\n        <br></br>\n        <Form\n            onSubmit={withdrawToken1}\n            error={!!withdrawToken1ErrMsg}\n        >\n          <Button content=\"WithdrawToken\" color=\"green\" />\n          <Input\n            label=\"\"\n            labelPosition=\"right\"\n            placeholder=\"amount in Ether\"\n            value={amountToWithdraw}\n            onChange={(event) => {\n              amountSet(event.target.value);\n            }}\n          />\n        </Form>\n\n        <br></br>\n        <Form\n            onSubmit={buyViaToken1}\n            error={!!buyViaToken1ErrMsg}\n        >\n          <Button content=\"BuyViaToken\" color=\"green\" />\n          <Input\n            label=\"\"\n            labelPosition=\"right\"\n            placeholder=\"slot id\"\n            value={slotId}\n            onChange={(event) => {\n              slotIdSet(event.target.value);\n            }}\n          />\n        </Form>\n\n        <br></br>\n        <br></br>\n      </EthereumContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n/**\n          <br></br>\n          <Form error={!!errMsg}>\n            <Message error header=\"Error\" content={errMsg} />\n            <Button color=\"orange\" loading={loading} content=\"setGasPrice\" />\n            <Input\n              label=\"unit in GWei\"\n              labelPosition=\"right\"\n              placeholder=\"gas price\"\n              value={gasPrice}\n              onChange={(event) => {\n                setGasPrice(event.target.value);\n                //checkNumeric(event.target.value, \"gasPrice\");\n              }}\n            />\n          </Form>\n\n          <br></br>\n          <Form error={!!errMsg}>\n            <Button color=\"orange\" loading={loading} content=\"setGasLimit\" />\n            <Input\n              label=\"unit in Wei\"\n              labelPosition=\"right\"\n              placeholder=\"gas limit\"\n              value={gasLimit}\n              onChange={(event) => {\n                setGasLimit(event.target.value);\n                //checkNumeric(event.target.value, \"gasLimit\");\n              }}\n            />\n          </Form>\n\n\n          <Label>gasPrice: {0}</Label>\n\n\n<div>\n    <ArrayObjects arrayInputs={rewardsDB} />\n  </div> \n\n  <br></br>\n  <Header />\n  <Label size={'huge'}> Under Construction </Label>\n*/\n// const getCurrentAccount = async (event) => {\n//   event.preventDefault();\n//   log1(\"---------== getCurrentAccount()\");\n//   log1(\"account[0]:\", compo[1]);\n//   const out = checkNetwork();\n//   log1(\"out:\", out.isOk, out.chainId)\n//   return true;\n// };\n\n//-------------------==\n//const [Approve1Va1, Approve1SetVa1] = useState(\"\");\n//const [Approve1ErrMsg, Approve1SetErrMsg]= useState(\"\");\n\n// const ArrayObjects = ({ arrayInputs }) => (\n//   <div>\n//     {arrayInputs.map((item) => (\n//       <div className=\"item\" key={item.id}>\n//         id:{item.id}, rewards: {item.reward}, timestamp: {item.updatedAt}\n//       </div>\n//     ))}\n//   </div>\n// );\n//-------------------==\n// const checkNumeric = (inputValue, inputSource) => {\n//   log1(\"checkNumeric\", inputValue);\n//   if (inputValue === \"\" || inputValue < 0 || isNaN(inputValue)) {\n//     const errMsg =\n//       \"input error@ \" +\n//       inputSource +\n//       \": amount cannot be empty, zero, negative, or non-numeric\";\n//     console.warn(errMsg);\n//     showErr(inputSource, errMsg);\n//     return false;\n//   } else {\n//     log1(\"checkNumeric Ok\");\n//     clearErr(inputSource);\n//     return true;\n//   }\n// };\n// const showErr = (inputSource, errMsg) => {\n//   switch (inputSource) {\n//     case \"gasPrice\":\n//       setErrMsg(errMsg);\n//       break;\n//     case \"gasLimit\":\n//       setErrMsg(errMsg);\n//       break;\n//     default:\n//       console.warn(\"showErr: no matched inputSource\");\n//   }\n// };\n// const clearErr = (inputSource) => {\n//   switch (inputSource) {\n//     case \"gasPrice\":\n//       setErrMsg(\"\");\n//       break;\n//     case \"gasLimit\":\n//       setErrMsg(\"\");\n//       break;\n//     default:\n//       console.warn(\"clearErr: no matched inputSource\");\n//   }\n// };\n\n// const handleDropdown_assetName = (e, { value }) => {\n//   log1(\"assetNameDropdown value:\", value);\n//   //assetNameSet(value);\n// };\n// const handleDropdown_addrTo = (e, { value }) => {\n//   log1(\"DropdownAddress value:\", value);\n//   //addrToSet(value);\n// };\n","import React from 'react';\n//import {Link} from 'react-router-dom';\n//import { ReactComponent as Logo } from '../../assets/crown.svg';\nimport './header.scss';\n\nconst Header = ({ hidden }) => (\n  <div className='header'>\n\n    <div className='options'>\n      <a className='option' href=\"https://www.google.com\" target=\"_blank\" rel=\"noreferrer\">\n      back to homepage\n      </a>\n\n    </div>\n  </div>\n);\n\n//{user: {curentUser}, cart: {hidden}}\n\nexport default Header;\n/**\n    <div className='options'>\n    <Link className='logo-container' to=\"/\">\n      <Logo className='logo' />\n    </Link>\n\n    <Link className='option' to='https://google.com'>\n        HOME PAGE\n      </Link>\n\n    </div>\n\n\n\n    */","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './components/header/header';\n//import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Header />\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n//serviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();"],"sourceRoot":""}